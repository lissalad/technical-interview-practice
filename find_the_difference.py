# PROBLEM:
# You are given two strings s and t.
# String t is generated by random shuffling string s
# and then add one more letter at a random position.
# Return the letter that was added to t.

# CLARIFYING:
# am i generating t? or is t guaranteed to fall under this description?
# only one character will be added?
# will the length of t always be one more than s?
# can the new character be a duplicate of one already in s?
# can i convert to a set?
# must this be done in place?

# PSEUDOCODE:
# create sets of unique characters in s and t.
# compare lengths to see if they have the same number of unique values, and the new character is a duplicate
# loop through t to see if there is a character not in s
# if so, return this
# if not, convert the original t strings into a list
# loop through string s and remove each character from list t
# return remaining value in t

def find_the_difference(s, t):
    unique_s = set(s)
    unique_t = set(t)

    if len(unique_s) != len(unique_t):
        for char in unique_t:
            if char not in unique_s:
                return char

    list_t = list(t)

    for char in s:
        list_t.remove(char)

    return list_t[0]


print(find_the_difference("abcde", "abcdef"))
print(find_the_difference("", "u"))
print(find_the_difference("sail", "snail"))

# FURTHER:
# My method was not the most efficient. It would be better to solve this with a
# for loop in each list, using the XOR operation to compare by bits and find the
# different character.
